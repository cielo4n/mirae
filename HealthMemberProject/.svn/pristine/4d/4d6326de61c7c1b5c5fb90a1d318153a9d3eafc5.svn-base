package health.database;

import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

//트레이너 데이터베이스에 접근하는 DAO(Data Access Object)클래스
public class TrainerDao {

	//유일하게 자기 자신을 참조할 수 있는 변수
	private static TrainerDao instance; 
	
	//데이터베이스 정보
	private static final String DBName="healthdb"; //데이터베이스이름은 이거로 한다
	private static final String DBUser = "root";
	private static final String DBPassword = "123456";
	
	private String url= "jdbc:mysql://localhost/"+DBName;
	private String jdbc_driver = "com.mysql.jdbc.Driver";
	
	private static Connection conn = null;
	private static Statement stmt = null;
	private static PreparedStatement pstmt = null;
	private static ResultSet rs = null;
	private static String sql = null;

	//private 생성자
	private TrainerDao(){
		try{
			Class.forName(jdbc_driver); //드라이버 로드
			conn = DriverManager.getConnection(url, DBUser, DBPassword); //Connection 연결
		} catch(ClassNotFoundException e){
			System.out.println("드라이버를 찾을 수 없습니다");
		} catch(SQLException e) {
			System.out.println("Connection 연결 실패");
		} 
	}
	
	//public 자기자신 반환
	public static TrainerDao getInstance() {
		if(instance == null) //참조변수가 null일 때는 생성자 호출
			instance = new TrainerDao();
		return instance;
	}

	//연결 종료
	private void disConnect(){
		try{
			if(rs != null) rs.close();
			if(stmt != null) stmt.close();
			if(pstmt != null) pstmt.close();
//			if(conn != null) conn.close();
		} catch(SQLException e) {
			System.out.println("종료 안됨");
			e.printStackTrace();
		}
	}
	
	//트레이너 조회(전부), 테이블에 연결하게 DefaultTableModel을 반환
	//헬스장에 해당하는 트레이너 조회
	public DefaultTableModel selectTrainerAll(String gym_id){
		String colNames[] = {"트레이너번호", "이름", "생년월일", "연락처", "주소"};
		DefaultTableModel model = new DefaultTableModel(colNames, 0){
			 public boolean isCellEditable(int row, int column) //무명클래스(자식)을 오버라이딩
	         {
	            return false; //수정불가
	         }
		};
		
		try{
			stmt = conn.createStatement();
			sql = "SELECT trainer_no, trainer_name, trainer_birth, trainer_tel, trainer_addr FROM trainer WHERE gym_id='"+gym_id+"'";
			rs = stmt.executeQuery(sql);
			
			while(rs.next()){
				model.addRow(new Object[]{
						rs.getInt("trainer_no"), rs.getString("trainer_name"), rs.getDate("trainer_birth"), 
						rs.getString("trainer_tel"), rs.getString("trainer_addr")
				});
			}
			return model;
		} catch(SQLException e){
			System.out.println("selectTrainer 실패");
			e.printStackTrace();
			return null;
		}
 		finally{
			disConnect();
		}
	}

	//트레이너 조회(이름 검색)
	//헬스장에 해당하는 트레이너 조회
	public DefaultTableModel selectTrainerSearch(String gym_id, String trainer_name){
		String colNames[] = {"트레이너번호", "이름", "생년월일", "연락처", "주소"};
		DefaultTableModel model = new DefaultTableModel(colNames, 0){
			 public boolean isCellEditable(int row, int column) //무명클래스(자식)을 오버라이딩
	         {
	            return false; //수정불가
	         }
		};
		
		try{
			stmt = conn.createStatement();
			sql = "SELECT trainer_no, trainer_name, trainer_birth, trainer_tel, trainer_addr FROM trainer WHERE trainer_name='"+trainer_name+"' AND gym_id='"+gym_id+"'";
			rs = stmt.executeQuery(sql);
			
			while(rs.next()){
				model.addRow(new Object[]{
						rs.getInt("trainer_no"), rs.getString("trainer_name"), rs.getDate("trainer_birth"), 
						rs.getString("trainer_tel"), rs.getString("trainer_addr")
				});
			}
			return model;
		} catch(SQLException e){
			System.out.println("trainerMember 실패");
			e.printStackTrace();
			return null;
		} finally{
			disConnect();
		}
	}
	
	//콤보박스에 들어갈 트레이너이름 조회
	public DefaultComboBoxModel<String> trainerCombo(String gym_id){
		DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();

		try{   //트레이너 번호, 트레이너 번호로 콤보박스 연결
			stmt = conn.createStatement();
			sql = "SELECT trainer_no, trainer_name FROM trainer WHERE gym_id='"+gym_id+"'";
			rs = stmt.executeQuery(sql);
			
			while(rs.next()){
				model.addElement(rs.getString("trainer_no")+"　"+rs.getString("trainer_name"));
			}
			return model;
		} catch(SQLException e){
			System.out.println("trainerCombo 실패");
			e.printStackTrace();
			return null;
		} finally{
			disConnect();
		}
	}
	
	//텍스트어리어에 들어갈 트레이너의 담당회원 이름 조회
	public String selectTrainerMem(int trainer_no){
		String str="";
		int i=0;
		try{
			stmt = conn.createStatement();
			sql = "SELECT mem_no, mem_name FROM member WHERE trainer_no='"+trainer_no+"'";
			rs = stmt.executeQuery(sql);
			
			while(rs.next()){
				if(i != 0) str+="\n"; 
				str += rs.getString("mem_no");
				str +="　";
				str += rs.getString("mem_name");
				i++;
			}
			return str;
		} catch(SQLException e){
			System.out.println("selectTrainerMem 실패");
			e.printStackTrace();
			return null;
		} finally{
			disConnect();
		}
	}
	
	//트레이너 상세보기
	public TrainerDto selectTrainer(int trainer_no){
		TrainerDto td;
		
		try{
			stmt = conn.createStatement();
			sql = "SELECT trainer_no, trainer_name, trainer_tel, trainer_addr, trainer_birth, trainer_gender, trainer_career FROM trainer WHERE trainer_no='"+trainer_no+"'";
			rs = stmt.executeQuery(sql);
			
			td = new TrainerDto();
			while(rs.next()){
				td.setTrainer_no(rs.getInt("trainer_no"));
				td.setTrainer_name(rs.getString("trainer_name"));
				td.setTrainer_tel(rs.getString("trainer_tel"));
				td.setTrainer_addr(rs.getString("trainer_addr"));
				td.setTrainer_birth(rs.getDate("trainer_birth"));
				td.setTrainer_gender(rs.getString("trainer_gender"));
				td.setTrainer_career(rs.getInt("trainer_career"));	
			}
			return td;
		} catch(SQLException e){
			System.out.println("selectTrainer 실패");
			e.printStackTrace();
			return null;
		} finally{
			disConnect();
		}
	}
	
	//트레이너 등록
	public boolean insertTrainer(TrainerDto td){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		try{
			sql = "INSERT INTO trainer VALUES (null, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, td.getTrainer_name());
			pstmt.setString(2, td.getTrainer_tel());
			pstmt.setString(3, td.getTrainer_addr());
			pstmt.setString(4, sdf.format(td.getTrainer_birth()));
			pstmt.setString(5, td.getTrainer_gender());
			pstmt.setInt(6, td.getTrainer_career());
			pstmt.setString(7, td.getGym_id());
			
			int result = pstmt.executeUpdate();
			
			if(result==1) 
				return true;
			else 
				return false;
			
		} catch(SQLException e){
			System.out.println("insertTrainer 실패");
			e.printStackTrace();
			return false;
		} finally{
			disConnect();
		}
	}
	
	//트레이너 수정
	public boolean updateTrainer(TrainerDto td){
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		try{
			sql = "UPDATE trainer SET trainer_name=?, trainer_tel=?, trainer_addr=?, trainer_birth=?, trainer_gender=?, trainer_career=? WHERE trainer_no=?";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, td.getTrainer_name());
			pstmt.setString(2, td.getTrainer_tel());
			pstmt.setString(3, td.getTrainer_addr());
			pstmt.setString(4, sdf.format(td.getTrainer_birth()));
			pstmt.setString(5, td.getTrainer_gender());
			pstmt.setInt(6, td.getTrainer_career());
			pstmt.setInt(7, td.getTrainer_no());
			
			int result = pstmt.executeUpdate();
			
			if(result==1) 
				return true;
			else 
				return false;
			
		} catch(SQLException e){
			System.out.println("updateTrainer 실패");
			e.printStackTrace();
			return false;
		} finally{
			disConnect();
		}
	}

	//트레이너 삭제하는 부분
	public boolean deleteTrainer(int trainer_no){
		try{
			stmt = conn.createStatement();
			sql = "DELETE FROM trainer WHERE trainer_no="+trainer_no;
			
			int result = stmt.executeUpdate(sql);
			
			if(result == 1) return true;
			else return false;
		} catch(SQLException e){
			System.out.println("deleteTrainer 실패");
			e.printStackTrace();
			return false;
		} finally{
			disConnect();
		}
	}
}
